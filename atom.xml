<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宇のBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-30T12:16:38.436Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>宇</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习的基于pytorch实现</title>
    <link href="http://example.com/2022/11/27/pytorch%20%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/"/>
    <id>http://example.com/2022/11/27/pytorch%20%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</id>
    <published>2022-11-27T14:23:38.000Z</published>
    <updated>2022-12-30T12:16:38.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="comment">#pytorch的速度比numpy更快</span></span><br><span class="line">x = torch.arange(<span class="number">12</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.shape <span class="comment"># 显示矩阵的阶数</span></span><br></pre></td></tr></table></figure><pre><code>torch.Size([12])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = x.reshape(<span class="number">3</span>,<span class="number">4</span>) <span class="comment">#转换矩阵的形状</span></span><br><span class="line">X</span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X.shape</span><br></pre></td></tr></table></figure><pre><code>torch.Size([3, 4])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.numel() <span class="comment"># 显示所有元素的个数</span></span><br></pre></td></tr></table></figure><pre><code>12</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#生成一个全为1的矩阵 2表示维度 3表示行数 4表示列数</span></span><br></pre></td></tr></table></figure><pre><code>tensor([[[1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.]],        [[1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.]]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.zeros((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#生成一个全为0的矩阵 2表示维度 3表示行数 4表示列数</span></span><br></pre></td></tr></table></figure><pre><code>tensor([[[0., 0., 0., 0.],         [0., 0., 0., 0.],         [0., 0., 0., 0.]],        [[0., 0., 0., 0.],         [0., 0., 0., 0.],         [0., 0., 0., 0.]]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.randn(<span class="number">3</span>,<span class="number">4</span>) <span class="comment"># 生成一个3行4列的随即元素的矩阵</span></span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0.8254,  0.5382,  1.3708,  1.4770],        [-1.1002, -0.2319, -0.0071,  0.2910],        [-0.3470,  0.4826,  0.2891, -0.1019]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor([[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]) <span class="comment">#为元素赋予值</span></span><br></pre></td></tr></table></figure><pre><code>tensor([[2, 3, 1, 4],        [1, 2, 3, 4],        [1, 1, 1, 1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor([[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]) <span class="comment">#在这里面他的元素的个数必须是相同的否则报错</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Cell In [11], line 1----&gt; 1 torch.tensor([[2,3,1,4],[1,2,3],[1,1,1,1]])ValueError: expected sequence of length 4 at dim 1 (got 3)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = torch</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.ones((<span class="number">10</span>))</span><br></pre></td></tr></table></figure><pre><code>tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>])</span><br><span class="line">y = torch.tensor([<span class="number">2.0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">x + y</span><br></pre></td></tr></table></figure><pre><code>tensor([ 3.,  4.,  6., 10.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x - y</span><br></pre></td></tr></table></figure><pre><code>tensor([-1.,  0.,  2.,  6.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x * y</span><br></pre></td></tr></table></figure><pre><code>tensor([ 2.,  4.,  8., 16.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x / y</span><br></pre></td></tr></table></figure><pre><code>tensor([0.5000, 1.0000, 2.0000, 4.0000])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x ** y</span><br></pre></td></tr></table></figure><pre><code>tensor([ 1.,  4., 16., 64.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.exp(x)</span><br></pre></td></tr></table></figure><pre><code>tensor([2.7183e+00, 7.3891e+00, 5.4598e+01, 2.9810e+03])</code></pre><p>连结两个矩阵，堆叠起来形成更大的张量，第一个是沿着行合并，第二个是沿着列合并。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = torch.arange(<span class="number">12</span>,dtype=torch.float32).reshape((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#dtype定义矩阵是float类型</span></span><br><span class="line">Y = torch.tensor([[<span class="number">2.0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]])</span><br><span class="line">torch.cat((X,Y),dim=<span class="number">0</span>),torch.cat((X,Y),dim=<span class="number">1</span>) <span class="comment">#延行或列</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>(tensor([[ 0.,  1.,  2.,  3.],         [ 4.,  5.,  6.,  7.],         [ 8.,  9., 10., 11.],         [ 2.,  1.,  4.,  3.],         [ 1.,  2.,  3.,  4.],         [ 4.,  3.,  2.,  1.]]), tensor([[ 0.,  1.,  2.,  3.,  2.,  1.,  4.,  3.],         [ 4.,  5.,  6.,  7.,  1.,  2.,  3.,  4.],         [ 8.,  9., 10., 11.,  4.,  3.,  2.,  1.]]))</code></pre><p>对于每个位置，如果相同则返回true否则返回false</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X == Y</span><br></pre></td></tr></table></figure><pre><code>tensor([[False,  True, False,  True],        [False, False, False, False],        [False, False, False, False]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X.<span class="built_in">sum</span>() <span class="comment"># 返回元素中所有的和</span></span><br></pre></td></tr></table></figure><pre><code>tensor(66.)</code></pre><h1 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h1><p>如果两个矩阵的行列数不同就会转变成为一个更大的矩阵进行运算，如下一个是3<em>1的矩阵一个是1</em>2的矩阵，进行相加变成了3*2的矩阵。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">3</span>).reshape((<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line">b = torch.arange(<span class="number">2</span>).reshape((<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">a,b</span><br></pre></td></tr></table></figure><pre><code>(tensor([[0],         [1],         [2]]), tensor([[0, 1]]))</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a+b</span><br></pre></td></tr></table></figure><pre><code>tensor([[0, 1],        [1, 2],        [2, 3]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X</span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0.,  1.,  2.,  3.],        [ 4.,  5.,  6.,  7.],        [ 8.,  9., 10., 11.]])</code></pre><h1 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h1><p>左后一个元素，在矩阵中就是最后一行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>tensor([ 8.,  9., 10., 11.])</code></pre><p>1：3选取第二个和第三个元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>tensor([[ 4.,  5.,  6.,  7.],        [ 8.,  9., 10., 11.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X[<span class="number">1</span>,<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">X</span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0.,  1.,  2.,  3.],        [ 4.,  5.,  9.,  7.],        [ 8.,  9., 10., 11.]])</code></pre><p>为多元素赋相同的值，只需要索引所有元素，：代表沿轴（列）的所有元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X[<span class="number">0</span>:<span class="number">2</span>,:] = <span class="number">12</span></span><br><span class="line">X</span><br></pre></td></tr></table></figure><pre><code>tensor([[12., 12., 12., 12.],        [12., 12., 12., 12.],        [20., 21., 22., 23.]])</code></pre><h1 id="节省内存"><a href="#节省内存" class="headerlink" title="节省内存"></a>节省内存</h1><p>在这个例子中，运行Y+X之后会重新分配内存，使Y指向新内存。这是不可取的，我们不能浪费内存</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">before = <span class="built_in">id</span>(Y)</span><br><span class="line">Y = Y + X</span><br><span class="line"><span class="built_in">id</span>(Y) ==before</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><p>可以使用切片表示法来将操作的结果分配给原先分配的数组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Z = torch.zeros_like(Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>,<span class="built_in">id</span>(Z))</span><br><span class="line">Z[:] = X+Y</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>,<span class="built_in">id</span>(Z))</span><br></pre></td></tr></table></figure><pre><code>id(Z): 3227757014528id(Z): 3227757014528</code></pre><p>如果在后续计算中没有重复使用X，可以用以下方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">before = <span class="built_in">id</span>(X)</span><br><span class="line">X += Y</span><br><span class="line"><span class="built_in">id</span>(X) ==before</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><h1 id="转换为其他python对象"><a href="#转换为其他python对象" class="headerlink" title="转换为其他python对象"></a>转换为其他python对象</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = X.numpy()</span><br><span class="line">B = torch.tensor(A)</span><br><span class="line"><span class="built_in">type</span>(A), <span class="built_in">type</span>(B)</span><br></pre></td></tr></table></figure><pre><code>(numpy.ndarray, torch.Tensor)</code></pre><p>将大小唯一的张量转换为python标量，可以用item和内置函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.tensor([<span class="number">3.5</span>])</span><br><span class="line">a,a.item(),<span class="built_in">float</span>(a),<span class="built_in">int</span>(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>(tensor([3.5000]), 3.5, 3.5, 3)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X &lt; Y <span class="comment"># 如果是比较两个张量的大小的话是对每个元素进行比较，结果返回布尔类型</span></span><br></pre></td></tr></table></figure><pre><code>tensor([[False, False, False, False],        [False, False, False, False],        [False, False, False, False]])</code></pre><p>对于广播机制的维度不同的两个张量，不能运算，只能两个矩阵完全一样才可以运算</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = torch.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">n = torch.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">m+n</span><br></pre></td></tr></table></figure><pre><code>tensor([[[ 0,  2,  4,  6],         [ 8, 10, 12, 14],         [16, 18, 20, 22]],        [[24, 26, 28, 30],         [32, 34, 36, 38],         [40, 42, 44, 46]]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = torch.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">n = torch.arange(<span class="number">36</span>).reshape((<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">m+n</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------RuntimeError                              Traceback (most recent call last)Cell In [57], line 3      1 m = torch.arange(24).reshape((2,3,4))      2 n = torch.arange(36).reshape((3,3,4))----&gt; 3 m+nRuntimeError: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = torch.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">n = torch.arange(<span class="number">45</span>).reshape((<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line">m+n</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------RuntimeError                              Traceback (most recent call last)Cell In [58], line 3      1 m = torch.arange(24).reshape((2,3,4))      2 n = torch.arange(45).reshape((3,3,5))----&gt; 3 m+nRuntimeError: The size of tensor a (4) must match the size of tensor b (5) at non-singleton dimension 2</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">深度学习中pytorch的使用</summary>
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pytorch" scheme="http://example.com/tags/pytorch/"/>
    
    <category term="Deep learning" scheme="http://example.com/tags/Deep-learning/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>直接插入排序</title>
    <link href="http://example.com/2022/11/21/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/11/21/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2022-11-21T07:02:26.452Z</published>
    <updated>2022-11-21T07:02:26.552Z</updated>
    
    <content type="html"><![CDATA[<p>直接插入排序实现原理：我们从数组（or结构体）中的第二个数据开始，与上一个数据进行比较，如果大于的话就让<code>a[0] = a[i]；a[i] = a[i-1];</code>之后我们就进入倒序打擂台模式，让<code>j = i - 2</code>之后如果<code>a[0]&lt;a[j]</code>就<code>j--</code>且让<code>a[j]</code>向后移动一个单位，如果大于就将<code>a[0]</code>赋值给当前的<code>a[j+1]</code>。至此插入排序算法结束。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[100];</span><br><span class="line">    int n;</span><br><span class="line">    int j;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">    if(a[i]&lt;a[i-1])&#123;</span><br><span class="line">        a[0] = a[i];</span><br><span class="line">        a[i] = a[i-1];</span><br><span class="line">        for( j=i-2;a[0]&lt;a[j];j--)&#123;</span><br><span class="line">            a[j+1] = a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        a[j+1] = a[0];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">for(int i = 1;i&lt;=n;i++)&#123;</span><br><span class="line">    printf(&quot;%d &quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入排序的时间复杂度为o($$n^2$$)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;直接插入排序实现原理：我们从数组（or结构体）中的第二个数据开始，与上一个数据进行比较，如果大于的话就让&lt;code&gt;a[0] = a[i]；a[i] = a[i-1];&lt;/code&gt;之后我们就进入倒序打擂台模式，让&lt;code&gt;j = i - 2&lt;/code&gt;之后如果&lt;cod</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>折半插入排序</title>
    <link href="http://example.com/2022/11/21/%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5/"/>
    <id>http://example.com/2022/11/21/%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5/</id>
    <published>2022-11-21T07:02:11.360Z</published>
    <updated>2022-11-21T07:02:11.472Z</updated>
    
    <content type="html"><![CDATA[<p>折半插入排序的思想就是折半查找和插入排序结合起来。首先将待排序元素放入<code>a[0]</code>，之后运用插入排序找到该元素的插入位置，定义一个<code>low </code>,<code>high</code>，取中间元素，之后比较<code>a[0],和a[mid]</code>的大小，如果比mid小则就让<code>high = mid-1</code>否则就让<code>low = mid +1</code>,直到循环结束<code>high&lt;low</code>,让<code>high+1，i-1</code>的元素后移动，让<code>a[high+1] = a[0]</code>结束。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int low,high,mid;</span><br><span class="line">    int a[100];</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">        a[0] = a[i];</span><br><span class="line">        low = 1;</span><br><span class="line">        high = i-1;</span><br><span class="line">        while(low&lt;=high)&#123;</span><br><span class="line">            mid = (low+high)/2;</span><br><span class="line">            if(a[0]  &lt; a[mid])&#123;</span><br><span class="line">                high = mid -1;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                low = mid+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            for(int j=i-1;j&gt;=high+1;j-- )</span><br><span class="line">                a[j+1] = a[j];</span><br><span class="line">            a[high+1] =a[0];</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>折半插入排序的时间复杂度为o($$n^2$$)该算法稳定。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;折半插入排序的思想就是折半查找和插入排序结合起来。首先将待排序元素放入&lt;code&gt;a[0]&lt;/code&gt;，之后运用插入排序找到该元素的插入位置，定义一个&lt;code&gt;low &lt;/code&gt;,&lt;code&gt;high&lt;/code&gt;，取中间元素，之后比较&lt;code&gt;a[0],和a[m</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>数据操作</title>
    <link href="http://example.com/2022/11/15/f-string/"/>
    <id>http://example.com/2022/11/15/f-string/</id>
    <published>2022-11-15T02:45:10.573Z</published>
    <updated>2022-11-15T02:45:10.644Z</updated>
    
    <content type="html"><![CDATA[<p>python中<code>f-string</code>输出小数的方法<code>f&#39;&#123;:.nf&#125;&#39;</code>其中n是你想保留的小数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 123.456</span><br><span class="line"># 只指定width 宽度右对齐</span><br><span class="line">&gt;&gt;&gt; f&quot;&#123;a:10&#125;&quot;</span><br><span class="line">&#x27;   123.456&#x27;</span><br><span class="line"># 只指定0width 用0填充</span><br><span class="line">&gt;&gt;&gt; f&quot;&#123;a:010&#125;&quot;</span><br><span class="line">&#x27;000123.456&#x27;</span><br><span class="line"># 使用width.precision 精度加宽度</span><br><span class="line">&gt;&gt;&gt; f&quot;&#123;a:8.1f&#125;&quot;</span><br><span class="line">&#x27;   123.5&#x27;</span><br><span class="line">&gt;&gt;&gt; f&quot;&#123;a:8.2f&#125;&quot;</span><br><span class="line">&#x27;  123.46&#x27;</span><br><span class="line">&gt;&gt;&gt; f&quot;&#123;a:.2f&#125;&quot;</span><br><span class="line">&#x27;123.46&#x27;</span><br><span class="line"># 在width后面，直接加f，表示补足小数点后的位数至默认精度6</span><br><span class="line">&gt;&gt;&gt; f&quot;&#123;a:2f&#125;&quot;</span><br><span class="line">&#x27;123.456000&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;python中&lt;code&gt;f-string&lt;/code&gt;输出小数的方法&lt;code&gt;f&amp;#39;&amp;#123;:.nf&amp;#125;&amp;#39;&lt;/code&gt;其中n是你想保留的小数&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="python学习" scheme="http://example.com/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>多边形面积</title>
    <link href="http://example.com/2022/11/04/Untitled/"/>
    <id>http://example.com/2022/11/04/Untitled/</id>
    <published>2022-11-04T15:06:10.000Z</published>
    <updated>2022-11-04T15:06:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过海伦公式实现c语言的多边形计算。</p><p>【问题描述】给出平面上一组顶点的坐标，计算出它们所围成的凸多边形的面积。<br>【输入形式】从标准输入读取顶点坐标。格式为：第一行是点的个数N（3≤N≤15），后面紧接着N行，每行两个数字 （由空格隔开），分别表示该点的X、Y坐标（0≤X，Y≤32767）。所有点的坐标互不相同，且按顺时针次序给出。<br>输入数据确保该多边形是一个凸多边形。<br>【输出形式】向标准输出打印一个浮点数，是该多边形的面积。该浮点数保留两位小数。<br>【输入样例】<br>4<br>3　0<br>1　0<br>1　2<br><img src="./image0013.gif" alt="Alt text"></p><p>【输出样例】<br>5.00</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int x[100];</span><br><span class="line">    int y[100];</span><br><span class="line">    int i = 1;</span><br><span class="line">    int n = 0;</span><br><span class="line">    int sum1 = 0, sum2 = 0;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">    while (i &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;x[i]);</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;y[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    for (i = 1; i &lt; n; i++)</span><br><span class="line">        sum1 += x[i] * y[i + 1];</span><br><span class="line">    sum1 = sum1 + x[n] * y[1];</span><br><span class="line">    for (i = 1; i &lt; n; i++)</span><br><span class="line">        sum2 += y[i] * x[i + 1];</span><br><span class="line">    sum2 = sum2 + x[1] * y[n];</span><br><span class="line">    double s = 0;</span><br><span class="line">    s = 0.5 * (sum1 - sum2);</span><br><span class="line">    if (s &gt; 0)</span><br><span class="line">        printf(&quot;%.2lf&quot;, s);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;%.2lf&quot;, -s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="./1343722896_8146.png" alt="Alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过海伦公式实现c语言的多边形计算。&lt;/p&gt;
&lt;p&gt;【问题描述】给出平面上一组顶点的坐标，计算出它们所围成的凸多边形的面积。&lt;br&gt;【输入形式】从标准输入读取顶点坐标。格式为：第一行是点的个数N（3≤N≤15），后面紧接着N行，每行两个数字 （由空格隔开），分别表示该点的X</summary>
      
    
    
    
    <category term="c语言" scheme="http://example.com/categories/c%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>选择排序</title>
    <link href="http://example.com/2022/11/03/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/11/03/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</id>
    <published>2022-11-03T08:25:24.000Z</published>
    <updated>2022-11-03T13:05:50.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>选择排序的主要操作是选择，主要思想是：<br>每趟排序在当前待排序序列中选择出关键码最小的记录，添加到有序序列中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void SelectSort(int r[,int n])&#123;</span><br><span class="line">    int i,index,t;</span><br><span class="line">    for(i=1;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        index=i;</span><br><span class="line">        for (j=i+1; i &lt;=n; j++)</span><br><span class="line">            if (r[j]&lt;r[index])</span><br><span class="line">            &#123;</span><br><span class="line">                index = j;</span><br><span class="line">            &#125;</span><br><span class="line">            if (index!=i)</span><br><span class="line">            &#123;</span><br><span class="line">                r[i] = t;</span><br><span class="line">                r[i] = r[index];</span><br><span class="line">                r[index] = t;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平均复杂度（$n^2$）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h1&gt;&lt;h3 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法_交换排序</title>
    <link href="http://example.com/2022/11/03/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/11/03/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F/</id>
    <published>2022-11-03T08:17:00.686Z</published>
    <updated>2022-11-03T13:05:56.551Z</updated>
    
    <content type="html"><![CDATA[<p>#排序算法_交换排序<br>前天刚学了排序算法中的交换排序，分别为冒泡排序，快速排序，现在我们来实它。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序的实现就是在数组中对相邻的两个元素进行交换，每次循环都将最大的一个元素沉到最底，从而实现排序。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void bubblesort(int a[], int n)</span><br><span class="line">&#123;</span><br><span class="line">    int bound, i, exchange, t;</span><br><span class="line">    exchange = n;</span><br><span class="line">    while (exchange)</span><br><span class="line">    &#123;</span><br><span class="line">        bound = exchange;</span><br><span class="line">        exchange = 0;</span><br><span class="line">        for (i = 1; i &lt; bound; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (a[i] &gt; a[i + 1])</span><br><span class="line">            &#123;</span><br><span class="line">                t = a[i];</span><br><span class="line">                a[i] = a[i + 1];</span><br><span class="line">                a[i + 1] = t;</span><br><span class="line">                exchange = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好情况O（0）<br>最坏情况O（$n^2$）<br>平均复杂度（$n^2$）</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序，原理是选取数组中一个处于相对于中间的值，然后其他的数值和其交换。当元素基本有序时，时间复杂度最高。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int partition(int a[], int first, int end)</span><br><span class="line">&#123;</span><br><span class="line">    int i, j;</span><br><span class="line">    i = first;</span><br><span class="line">    j = end;</span><br><span class="line">    int t, e;</span><br><span class="line">    while (i &lt; j &amp;&amp; r[i] &lt;= r[j]) j--;</span><br><span class="line">        if (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            t = a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        while (i &lt; j &amp;&amp; r[i] &lt;= r[j]) i++;</span><br><span class="line">        if (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            t = a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        return j;</span><br><span class="line"> &#125;</span><br><span class="line">    void quicksort(int a[], int first, int end)</span><br><span class="line">    &#123;</span><br><span class="line">        int pivotpos;</span><br><span class="line">        while(first&lt;end)&#123;</span><br><span class="line">        pivotpos = partition(a, first, end);</span><br><span class="line">        quicksort(r, first, pivotpos - 1);</span><br><span class="line">        quicksort(r, pivotpos + 1, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O（n$log_2$n）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#排序算法_交换排序&lt;br&gt;前天刚学了排序算法中的交换排序，分别为冒泡排序，快速排序，现在我们来实它。&lt;/p&gt;
&lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;p&gt;冒泡排</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>switch case</title>
    <link href="http://example.com/2022/10/25/switch%20case/"/>
    <id>http://example.com/2022/10/25/switch%20case/</id>
    <published>2022-10-25T14:55:40.455Z</published>
    <updated>2022-11-03T13:05:52.784Z</updated>
    
    <content type="html"><![CDATA[<p> 最近本人在学习单链表的时候，使用switch case 语句对单链表进行操作的时候发现了“jump to case label [-fpermissive]”这种错误，通过参考别人的博客发现，造成这种现象的原因通过查阅后发现是因为在”case:“里面定义了很多变量导致的，将case里面的定义变量的语句删除后，报错消失了。<br> 总结：不要在switch case 里面定义变量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 最近本人在学习单链表的时候，使用switch case 语句对单链表进行操作的时候发现了“jump to case label [-fpermissive]”这种错误，通过参考别人的博客发现，造成这种现象的原因通过查阅后发现是因为在”case:“里面定义了很多变量导致的，</summary>
      
    
    
    
    <category term="c语言" scheme="http://example.com/categories/c%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>顺序表</title>
    <link href="http://example.com/2022/10/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>http://example.com/2022/10/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E9%A1%BA%E5%BA%8F%E8%A1%A8/</id>
    <published>2022-10-22T04:42:26.596Z</published>
    <updated>2022-11-03T13:05:54.597Z</updated>
    
    <content type="html"><![CDATA[<p>最近本人在学习严版的《数据结构》中发现，其在使用c语言的函数中对顺序表进行修改的时候使用了&amp;，而不是传入该函数的指针，这是我疑惑。</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertList</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, <span class="type">int</span> e)</span></span><br></pre></td></tr></table></figure><p>让我感到很疑惑的是，在c语言中这种的语法不大友好，后来通过搜索，才发现这种语法是在c++中存在的，这种方法叫做引用（笔者没有学过c++，也是道听途说，可能并不准确，也希望读者谅解）。这种发现在我的编译器上没有报错，是因为笔者使用的是dev c++，c++在其上边的编译直接通过了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近本人在学习严版的《数据结构》中发现，其在使用c语言的函数中对顺序表进行修改的时候使用了&amp;amp;，而不是传入该函数的指针，这是我疑惑。&lt;/p&gt;
&lt;h3 id=&quot;代码块&quot;&gt;&lt;a href=&quot;#代码块&quot; class=&quot;headerlink&quot; title=&quot;代码块&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/10/20/hello-world/"/>
    <id>http://example.com/2022/10/20/hello-world/</id>
    <published>2022-10-20T05:08:03.000Z</published>
    <updated>2022-10-20T05:07:14.510Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
